version: 2

jobs:
    # The build job
    build:
        docker:
            - image: circleci/node:8.12.0-browsers
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "package.json" }}
            - restore_cache:
                keys:
                - v1-client-dependencies-{{ checksum "client/package.json" }}
            # Install project dependencies
            #- run:
            #    name: Install server dependencies
            #    command: npm install

            # Install client dependencies
            - run:
                name: Install client dependencies
                command: npm install
                working_directory: client

            # Lint the source code 
            # just skip now
            #- run:
            #    name: Linting
            #    command: npm run lint
            # Test the source code
            # skip for now

            - run:
               name: Testing
               command: npm run test
               working_directory: client

            # Cache local dependencies if they don't exist

            - save_cache:
                key: v1-dependencies-{{ checksum "package.json" }}
                paths:
                    - node_modules
            - save_cache:
                key: v1-client-dependencies-{{ checksum "client/package.json" }}
                paths:
                    - client/node_modules


    #deploy job
    deploy:
        docker:
            - image: circleci/node:10.15.1-browsers
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}

            # # Install client dependencies
            # - run:
            #     name: Install client dependencies
            #     command: |
            #         node -v
            #         npm -v
            #         npm install
            #     working_directory: client
            # - run:
            #     name: Building
            #     command: |
            #         if [ "${CIRCLE_BRANCH}" == "master" ]; then
            #             npm run build
            #         elif [ "${CIRCLE_BRANCH}" == "chris-deploy" ]; then
            #             npm run build
            #         fi
            #     working_directory: client

            # Install AWS EB Cli
            - run:
                name: Install AWS EB cli
                command: |
                    sudo apt-get install python-pip python-dev build-essential
                    sudo pip install awsebcli --upgrade
            # Create AWS Credentials
            - run:
                name: Create AWS credentials manually
                command: |
                    mkdir ~/.aws
                    touch ~/.aws/config
                    chmod 600 ~/.aws/config
                    echo "[profile eb-cli]" > ~/.aws/config
                    echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
                    echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config

            # Deploy to EB
            - run:
                name: Deploy to EB
                command: |
                    eb deploy



workflows:
    version: 2
    # The build and deploy workflow
    build_and_deploy:
        jobs:
            #- build
            # The deploy job will only run on the filtered branches and
            # require the build job to be successful before it starts
            - deploy:
                #requires:
                    #- build
                filters:
                    branches:
                        only:
                            - chris-deploy
                            - development
                            - staging
